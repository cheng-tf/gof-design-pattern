package cn.edu.bupt.opensource.example;

/**
 * <p>Title: Strategy</p>
 * <p>Description: 策略：定义算法的接口 </p>
 * <p>Company: bupt.edu.cn</p>
 * <p>Created: 2018-06-28 19:27</p>
 * @author ChengTengfei
 * @version 1.0
 *
 * 策略模式
 *  定义：定义一系列算法，并封装、使之可互相替换；从而使得算法可独立于客户端而变化。
 *  角色：
 *      1）Strategy：策略接口，用于约束一系列具体的策略算法。
 *      2）ConcreteStrategy：具体的策略(算法)实现
 *      3）Context：环境对象(上下文)，负责与具体的策略类交互，持有策略类的真正实现；也可让此类获取上下文数据、回调上下文。
 *  举例：报价管理
 *      1）需求：对于普通客户或新客户为全价；对于老客户统一折扣5%；对于大客户统一折扣10%。
 *      2）使用策略模式
 *  认识：
 *      1）功能：将具体的算法实现，从具体的业务中独立出来，实现成为单独的算法，形成一系列的算法，使之可相互替换。
 *              中心在于如何组织、调用这些算法。
 *      2）策略模式与if else：策略模式将if else中平等的具体实现封装到具体的算法实现类中，使用上下文与之交互。
 *      3）算法的平等性：可相互替换，相互对立。
 *              策略算法是相同行为的不同实现。
 *      4）谁来选择具体的策略算法？
 *          A.客户端
 *          B.上下文对象：容错恢复
 *      5）Strategy的实现方式：接口或抽象类
 *      6）运行时策略的唯一性
 *      7）Context与Strategy的关系：紧密耦合--->上下文封装着具体策略对象进行算法运算所需要的数据，这些对象通过上下文的回调获取。
 *      8）举例：工资支付
 *          A.将上下文作为参数传递给策略对象。
 *          B.添加需要不同数据的新策略时，考虑扩展上下文对象。
 *      9）容错恢复机制
 *          A.举例：日志记录---若暂时连接不上数据库，则县存储到文件，后续再转录至数据库。
 *              策略模式：采用策略模式，在运行时根据需要动态切换(try-catch)记录日志数据库策略、记录日志文件策略。
 *              在catch块中切换。
 *      10）策略模式结合模板方法模式
 *          A.若需要在一系列策略算法提供公共功能，则：
 *              1)在上下文中实现公共功能，策略算法回调；
 *              2）策略接口更改为抽象类
 *              3）所有的策略算法定义一个抽象父类，此父类作为策略接口的默认实现。
 *          B.主要结构采用策略模式，局部采用模板方法模式--->即策略接口的实现采用模板方法模式
 *  优点：
 *      1）定义一系列算法
 *      2）避免多重条件语句
 *      3）扩展性好
 *  缺点：
 *      1）客户必须了解所有策略的不同
 *      2）对象数量增加
 *      3）只适合扁平的算法结构
 *  本质：分离算法，选择实现
 *  设计原则：开闭原则
 *  适用场景：
 *      1）若存在多个类仅有行为差别，可考虑。
 *      2）若针对同一个算法，存在不同实现，可考虑。
 *      3）若需要封装算法中相关的数据，可考虑。
 *
 */
public interface Strategy {

    /**
     * 算法
     */
    void algorithm();

}
