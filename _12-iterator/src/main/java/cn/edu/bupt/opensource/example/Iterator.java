package cn.edu.bupt.opensource.example;

/**
 * <p>Title: Iterator</p>
 * <p>Description: 迭代器接口 </p>
 * <p>Company: bupt.edu.cn</p>
 * <p>Created: 2018-06-27 17:13</p>
 * @author ChengTengfei
 * @version 1.0
 *
 * 迭代器模式
 *  定义：提供一种方法顺序访问一个聚合对象的各个元素，而不暴露其内部表示。
 *  角色：
 *      1）Iterator：迭代器接口，定义访问、遍历元素的接口。
 *      2）ConcreteIterator：迭代器的具体实现；提供对聚合对象的遍历，并跟踪遍历时的当前位置。
 *      3）Aggregate：聚合对象，定义创建相应的迭代器对象。
 *      4）ConcreteAggregate：聚合对象的具体实现。
 *  举例：工资表数据的整合
 *      1）需求：对两个工资系统整合，存储方式分别为List、数组，如何实现统一查看工资数据？
 *      2）抽象化：如何以一种统一的方式，来访问内部实现不同(List/数组)的聚合对象？
 *  认识：
 *      1）功能：提供对聚合对象的迭代访问，通常支持多态迭代(即为不同的聚合结构，提供统一的迭代接口)。
 *              注意：多态迭代可能引起类型安全问题，可考虑使用泛型。
 *      2）关键思想：对聚合对象的遍历、访问从聚合对象中分离，放入到单独的迭代器中。
 *      3）内部迭代器：由迭代器自身控制迭代下一个元素的步骤，客户端不能干预。
 *      4）外部迭代器：由客户端控制迭代下一个元素的步骤，如举例所示。
 *      5）Java中最简单的统一访问聚合的方式：foreach，注意仍暴露内部实现，不是标准的迭代器模式。
 *      6）使用Java的迭代器
 *          java.util.Iterator接口
 *              A.不在需要自己实现Iterator接口
 *              B.集合已经提供了Iterator，则不再需要具体迭代器实现对象。
 *      7）带迭代策略的迭代器：最典型的是过滤功能的迭代器。
 *      8）谁来定义遍历算法？
 *          A.聚合对象本身负责：在遍历过程中，用迭代器存储当前迭代的状态，此迭代器称为“游标”，仅用于指示当前的位置。
 *          B.迭代器负责：
 *      9）双向迭代器：可同时向前、或向后的数据遍历。
 *          java.util.ListIterator接口即是一个双向迭代器。
 *  优点：
 *      1）封装性更好
 *      2）可使用不同的遍历方式遍历一个集合
 *      3）迭代器简化了聚合的接口
 *      4）简化客户端的调用
 *      5）同一个聚合上可实现多个遍历
 *  本质：控制访问聚合对象中的元素
 *  适用场景：
 *      1）若平希望提供访问聚合对象的内容，而同时不暴露其内部表示，可考虑。
 *      2）若希望有多种方式访问聚合对象，可考虑。
 *      3）若希望为遍历不同的聚合对象提供一个统一的接口，可考虑。
 *  翻页迭代：
 *      1）纯数据库实现：基于SQL语句    --->以时间换空间
 *      2）纯内存实现                   --->以空间换时间
 *      3）纯数据库 + 纯内存实现
 *
 */
public interface Iterator {

    /**
     * 移动到聚合对象的下第一个位置
     */
    void first();

    /**
     * 移动到聚合对象的下一个位置
     */
    void next();

    /**
     * 判断是否已移动到聚合对象的最后一个位置
     */
    boolean isDone();

    /**
     * 获取迭代的当前元素
     */
    Object currentItem();

}
